#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use LWP::UserAgent;
use JSON;
use Digest::MD5;
use Cache;

$| ++;

=head1 SYNOPSIS

  #1
    cookie => 'MTUxNTAzMzg1NnxEdi1CQkFFQ180SUFBUXdCRUFBQU5mLUNBQUVGZEc5clpXNEdjM1J5YVc1bkRDSUFJREk0T1Rsa1l6aG1ZMk5tWWpRMk16TmtaV1kzTlRSbE1XWmtNVFpsTW1JeHyVJcLDk8iEGWlwsv8le0WzgNxhZ6JIYRFMOYzE8fKecA==',
    point => 'job_r'
    treeid => 123
  #3
    appname: xx
    appkey: xx

    return 1 if ok
=cut

my ( $pmspoint, %app, %env );
BEGIN{
    use Configini;
    $pmspoint = Configini::get( 'pmspoint' );
    %env = Configini::env( 'pmspointenv' );

    for my $file ( glob "/data/Software/mydan/*/conf/appname" )
    {
        my $name = `cat $file`;
        chomp $name;
        $file =~ s/appname/appkey/;
        my $key = `cat $file`;
        chomp $key;
        $app{$name} = $key eq 'c3random' && $ENV{OPEN_C3_RANDOM} ? $ENV{OPEN_C3_RANDOM} : $key;
    }

};

return sub
{
    my %param = @_;
    my ( $cookie, $point, $treeid ) = @param{qw(cookie point treeid )};

    if( $param{appname} && $param{appkey} )
    {
         return ( $app{$param{appname}} && $app{$param{appname}} eq $param{appkey} ) ? 1 : 0;
    }
    else
    {
        my $treestr = '';
        if( defined $treeid )
        {
            if( $treeid )
            {
                $treestr = "&treeid=$treeid";
            }
            else
            {
                if( $point =~ /_read$/ )
                {
                    return 1;
                }
                else
                {
                    $point =~ s/_read$/_root/;
                }
            }
        }

        my $db = $param{db};
        my $type = "$cookie$point$treestr:pms";
        my $uuid = Digest::MD5->new->add($type)->hexdigest;
        my $now = time;
        if ( Cache::get_refresh() + Cache::get_expire() > $now )
        {
            my $value = eval{ $db->query( "select value from openc3_connector_cache where uuid = '$uuid'" ); };
            return $value->[0][0] if $value->[0] ;
        }

        my $ua = LWP::UserAgent->new;
        $ua->default_header( %env ) if %env;
        my $res = $ua->get( "$pmspoint?point=$point$treestr&cookie=$cookie" );
        if( $res->is_success )
        {
            my $data = eval{JSON::from_json $res->content};
            if ( $data->{stat} )
            {
                my $cache_value = $data->{data};
                my $update_time = time;
                my $affected = eval{ $db->execute( "update openc3_connector_cache set value = '$cache_value', update_time = '$update_time' where uuid = '$uuid'" ); };
                eval{ $db->execute( "replace into openc3_connector_cache ( `uuid`, `type`, `value`, `update_time` ) values( '$uuid', '$type', '$cache_value', '$update_time' )" ); } unless $affected && $affected eq 1;
                return $data->{data};
            }
            Cache::refresh(time);
            my $old_value = eval{ $db->query( "select value from openc3_connector_cache where uuid = '$uuid'" ); };
            return $old_value->[0][0] if $old_value->[0] ;
            die "call userauth.point result". $data->{info} || '';
        }
        Cache::refresh(time);
        my $old_value = eval{ $db->query( "select value from openc3_connector_cache where uuid = '$uuid'" ); };
        return $old_value->[0][0] if $old_value->[0] ;
        die "call userauth.point fail";
    }
}

