#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use Logs;
use YAML::XS;
use LWP::UserAgent;
use Digest::MD5;
use Cache;

$| ++;

=head1 SYNOPSIS

    cookie => 'cookiestring',
    treeid =>
    point =>

    logs => 日志对象

=cut

my ( $pmspoint, %env, $ssousername, %ssousernameenv );
BEGIN{
    use Configini;
    $pmspoint = Configini::get( 'pmspoint' );
    %env = Configini::env( 'pmspointenv' );

    $ssousername = Configini::get( 'ssousername' );
    %ssousernameenv = Configini::env( 'ssousernameenv' );
    die "ssousername undef on config.ini" unless $ssousername;

};

return sub
{
    my ( %param )= @_;
    my ( $cookie, $point, $treeid, $logs, $db ) = @param{qw(cookie point treeid logs db )};

    $treeid ||= 0;
    $logs = Logs->new( 'code.point' ) unless $logs;
#    $logs->die( "id not a number" ) unless $id =~ /^\d+$/;

    return 1 if $treeid && $treeid == 4000000000;
    if( $treeid && $treeid >= 4000000000 )
    {
        my $ua = LWP::UserAgent->new;
        $ua->default_header( %ssousernameenv ) if %ssousernameenv;
        my $res = $ua->get( "$ssousername$param{cookie}" );
        if($res->is_success)
        {
            my $v = eval{decode_json $res->decoded_content};
            return undef unless $v->{stat};
            my $user = $v->{data}{user};
            $user =~ s/\./_/;
            my $match = eval{ $db->query( "select id from openc3_connector_private where id='$treeid' and user='$user'" )};
            return $match && @$match > 0 ? 1 : 0;
        }
        return 0;

    }
    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env ) if %env;

    my $treestr = '';
    if( defined $treeid )
    {
        if( $treeid )
        {
            $treestr = "&treeid=$treeid";
        }
        else
        {
            if( $point =~ /_read$/ )
            {
                return 1;
            }
            else
            {
                $point =~ s/_read$/_root/;
            }
        }
    }

    my $type = "$cookie$point$treestr:point";
    my $uuid = Digest::MD5->new->add($type)->hexdigest;
    my $now = time;
    if ( Cache::get_refresh() + Cache::get_expire() > $now )
    {
        my $value = eval{ $db->query( "select value from openc3_connector_cache where uuid = '$uuid'" ); };
        return $value->[0][0] if $value->[0] ;
    }

    my $res = $ua->get( "$pmspoint?point=$point$treestr&cookie=$cookie" );
    if($res->is_success)
    {
        my $v = eval{decode_json $res->decoded_content};
        if ( $v->{stat} )
        {
            my $cache_value = $v->{data};
            my $update_time = time;
            my $affected = eval{ $db->execute( "update openc3_connector_cache set value = '$cache_value', update_time = '$update_time' where uuid = '$uuid'" ); };
            eval{ $db->execute( "replace into openc3_connector_cache ( `uuid`, `type`, `value`, `update_time` ) values( '$uuid', '$type', '$cache_value', '$update_time' )" ); } unless $affected && $affected eq 1;
            return $v->{data};
        }
    }
    Cache::refresh(time);
    my $old_value = eval{ $db->query( "select value from openc3_connector_cache where uuid = '$uuid'" ); };
    return $old_value->[0][0] if $old_value->[0] ;
    die $res->content;
};
1
